{"version":3,"file":"init.min.js","sources":["../src/init.js"],"sourcesContent":["import ModalDeleteCancel from 'core/modal_delete_cancel';\nimport ModalEvents from 'core/modal_events';\nimport notification from  'core/notification';\n\nexport const init = (token)=> {\n    \n    const boreset=document.querySelector('#id_removetables');\n    boreset.classList.remove(['btn-secondary']);\n    boreset.classList.add(['btn-danger']);\n    boreset.addEventListener('click',()=>{\n        popup(token);\n        \n    })\n}\n\nexport const popup = async (token) => {\n    const modal = await ModalDeleteCancel.create({\n        title: 'Reset tables itp and partialplan',\n        body: '<p>By doing this you confirm you want to remove all data in the tables: <strong>mdl_itp</strong> and <strong>mdl_partialplan</strong>.</p><p>Are you sure?</p>',\n        \n        \n    });\n    modal.getRoot().on(ModalEvents.delete, (e)=>{\n        //Being here the user confirms to reset the tables itp and partialplan\n        requestTableReset(token);\n    })\n    modal.show();\n}\n\nconst requestTableReset=(token)=>{\n    const xhr=new XMLHttpRequest();\n    const url=window.location.protocol+'//'+window.location.hostname+'/webservice/rest/server.php';\n    xhr.open('POST',url,true);\n    const formData=new FormData();\n    formData.append('wstoken',token);\n    formData.append('wsfunction','local_uploaditp_remove_tables');\n    formData.append('moodlewsrestformat','json');\n    formData.append('params[0][op]','yes');\n    xhr.send(formData);\n    xhr.onload = (event) =>{\n        onLoadFunction(xhr);\n        };\n    xhr.onprogress = (event)=>{\n        onProgressFunction(event);\n    } \n    xhr.onerror = function() {\n        window.console.log(\"Solicitud fallida\");\n    };\n}\n\nconst onProgressFunction= (event)=>{\n    if (event.lengthComputable) {\n      window.console.log(`Recibidos ${event.loaded} de ${event.total} bytes`);\n    } else {\n      window.console.log(`Recibidos ${event.loaded} bytes`); // sin Content-Length\n    }\n}\n\nconst onLoadFunction=(myXhr)=>{\n    if (myXhr.readyState===4 && myXhr.status===200){\n        const res=JSON.parse(myXhr.response);\n        if (res[0].result===true){\n            notification.addNotification({\n                message: \"Tables have been successfully reset\",\n                type: \"info\"\n            })\n        }\n        \n        \n    }\n}\n\n\n\n\n\n"],"names":["token","boreset","document","querySelector","classList","remove","add","addEventListener","popup","async","modal","ModalDeleteCancel","create","title","body","getRoot","on","ModalEvents","delete","e","requestTableReset","show","xhr","XMLHttpRequest","url","window","location","protocol","hostname","open","formData","FormData","append","send","onload","event","onLoadFunction","onprogress","onProgressFunction","onerror","console","log","lengthComputable","loaded","total","myXhr","readyState","status","JSON","parse","response","result","addNotification","message","type"],"mappings":"whBAIqBA,cAEXC,QAAQC,SAASC,cAAc,oBACrCF,QAAQG,UAAUC,OAAO,CAAC,kBAC1BJ,QAAQG,UAAUE,IAAI,CAAC,eACvBL,QAAQM,iBAAiB,SAAQ,KAC7BC,MAAMR,iBAKDQ,MAAQC,MAAAA,cACXC,YAAcC,6BAAkBC,OAAO,CACzCC,MAAO,mCACPC,KAAM,mKAIVJ,MAAMK,UAAUC,GAAGC,sBAAYC,QAASC,IAEpCC,kBAAkBpB,UAEtBU,MAAMW,mCAGJD,kBAAmBpB,cACfsB,IAAI,IAAIC,eACRC,IAAIC,OAAOC,SAASC,SAAS,KAAKF,OAAOC,SAASE,SAAS,8BACjEN,IAAIO,KAAK,OAAOL,KAAI,SACdM,SAAS,IAAIC,SACnBD,SAASE,OAAO,UAAUhC,OAC1B8B,SAASE,OAAO,aAAa,iCAC7BF,SAASE,OAAO,qBAAqB,QACrCF,SAASE,OAAO,gBAAgB,OAChCV,IAAIW,KAAKH,UACTR,IAAIY,OAAUC,QACVC,eAAed,MAEnBA,IAAIe,WAAcF,QACdG,mBAAmBH,QAEvBb,IAAIiB,QAAU,WACVd,OAAOe,QAAQC,IAAI,uBAIrBH,mBAAqBH,QACnBA,MAAMO,iBACRjB,OAAOe,QAAQC,wBAAiBN,MAAMQ,sBAAaR,MAAMS,iBAEzDnB,OAAOe,QAAQC,wBAAiBN,MAAMQ,mBAItCP,eAAgBS,WACK,IAAnBA,MAAMC,YAAiC,MAAfD,MAAME,OAAa,EAEvB,IADVC,KAAKC,MAAMJ,MAAMK,UACnB,GAAGC,8BACMC,gBAAgB,CACzBC,QAAS,sCACTC,KAAM"}